apply plugin: 'com.android.application'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd HH-mm-ss")
}
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))



android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            storeFile file(keystoreProperties['storeFile'])
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.smzskj.crk"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    // 修改生成APK名字
//    android.applicationVariants.all { variant ->
//        def file = variant.outputs[0].outputFile
//        variant.outputs[0].outputFile = new File(file.parent,
//                file.name.replace(".apk", "_" +  "SuperSellerEnterprise_V${releaseTime()}" + "_"+  ".apk"))
//    }
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName = "CRK_V${defaultConfig.versionName}_${releaseTime()}.apk"
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }
    lintOptions {
        abortOnError false
    }

    compileOptions{
        sourceCompatibility=JavaVersion.VERSION_1_7
        targetCompatibility=JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    compile "com.android.support:design:${rootProject.ext.supportVersion}"
    testCompile 'junit:junit:4.12'
//    compile files('libs/fastjson-1.2.9.jar')
//    compile files('libs/smartdevicesdk.jar')
//    compile files('libs/zbar.jar')
}
